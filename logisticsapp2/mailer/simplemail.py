'''
 * Rwanda Law Reform Comission
 *
 * Developed by Sium, Kigali, Rwanda 2016-2017. All Rights Reserved
 *
 * This content is protected by national and international patent laws.
 *
 * Possession and access to this content is granted exclusively to Developers
 * of RLRC and Sium, while full ownership is granted only to Rwanda Law Reform Comission.
 
 *
 * @package	RLWC - LRC
 * @author	Kiflemariam Sium (kmsium@gmail.com || sium@go.rw || sium@iconicdatasystems.com)
 * @copyright	Copyright (c) RLCR Limited, 2017
 * @license	http://
 * @link	http://
 * @since	Version 1.0.0
 * @filesource
 '''
from django.core.mail import EmailMultiAlternatives
from django.utils.html import strip_tags


from django.core.mail import EmailMultiAlternatives

from app.conf import base as settings

from django.utils.translation import ugettext_lazy as _
from tools.readconfiuration import readConfiguration

if settings.RUNNING_DEVSERVER:
	
	from app.conf import development as web_settings
else:
	
	from app.conf import production as web_settings









def sendMessage(subject,content,to):
	'''
	Send email message.

	@subject: subject of the email
	@content: content of the email
	@to: email receipent

	Affected by configuration. If emailing is turned off, then this won't run
	'''



	config=readConfiguration()

	if config!=None and config.enable_emailing==1:

		if isinstance(to,str):
			to=to.split(',')

		text_content = strip_tags(content) # Strip the html tag. So people can see the pure text at least.

		# create the email, and attach the HTML version as well.
		try:
			msg = EmailMultiAlternatives(subject, text_content, settings.EMAIL_HOST_USER, to)
			msg.attach_alternative(content, "text/html")
			msg.send()
		except:
			pass






def emailNewRequestNotification(lang,emails,req_by,req_code,req_date):
	'''
	Once a request is made (i.e.employees submit a request to be given items from the store), we notify logistis people who are meant to get notification about the request here thru email so they
	process the request of employees. The message is based on a template message already saved/created

	@input: lang =>the language (so the template message in the langauge is picked up)
			emails: an array list of emails of users who are authorized/permitted to get ntoifications when employees make requests
			req_by: the name of the person who made the request for the items
			req_code: the code of the request
			req_date: the date ther request is made

	'''
	
	email_message_template_file=''.join([settings.TEMPLATE_MESSAGES_DIR,lang,'/request_notification.html'])
	with open(email_message_template_file) as data:
		email_msg=data.read()

	email_msg=email_msg.replace('{employee_full_name}',req_by).replace('{date}',req_date).replace('{request_code}',req_code)
	sendMessage(_('EmailSubjectNewRequest'),email_msg,emails)

		
def emailResetPasswordMessage(lang,email,username,name,new_pwd):
	'''
	Once we reset a user password, we email the user the following message based on template

	@input lang=>language of hte user/reciepent
			email: email to send to
			username: the username of the uer
			name: name of the user
			new_pwd: the new password we generated for hte user
	'''
	
	email_message_template_file=''.join([settings.TEMPLATE_MESSAGES_DIR,lang,'/pwd_reset.html'])
	with open(email_message_template_file) as data:
		email_msg=data.read()

	link=web_settings.WEB_ADDRESS_FRONTEND + 'start/login/'

	email_msg=email_msg.replace('{name}',name).replace('{username}',username).replace('{password}',new_pwd).replace('{link}',link)

	sendMessage(_('EmailSubjectUserPasswordResetted'),email_msg,email)



def emailResetPasswordLink(email,lang,token):
	'''
	Send password reset link to members. Once members forgot their password and want a new one, we send them a link with a message here

	@input: email: the email of the user
			lang : langague of the user
			token: the password reset token
	'''


	email_message_template_file=''.join([settings.TEMPLATE_MESSAGES_DIR,lang,'/forgotpwd.html'])

	with open(email_message_template_file) as data:
		email_msg=data.read()

	activation_path=web_settings.WEB_ADDRESS_FRONTEND + 'start/new-pwd/' + token + '/' + email;

	email_msg=email_msg.replace('{link}',activation_path)
	

	sendMessage(_('EmailForgtPassword'),email_msg,email)

	


	
def emailRegistrationDetails(lang,name,token,email,pwd):
	'''
	ONce we create the user, we send registration information to the user so they can activate theiraccount and login

	@input lang: lang of hte user
			name: name of hte user
			token: account activation token
			email: email of the user 
			pwd: password of hte user generated by the system
	'''

	email_message_template_file=''.join([settings.TEMPLATE_MESSAGES_DIR,lang,'/registered.html'])
	with open(email_message_template_file) as data:
		email_msg=data.read()

	activation_path=web_settings.WEB_ADDRESS_FRONTEND + 'start/activate/' + token + '/' + email;

	email_msg=email_msg.replace('{name}',name).replace('{username}',email).replace('{password}',pwd).replace('{link}',activation_path)

	sendMessage(_('EmailRegisteredSubject'),email_msg,email)

def emailActivationLink(lang,name,token,email):
	'''
	Email activation link to the user. This can happen if admin manually deactivates the user and the user needs to activate his account;
	account activating link is expired and new one is needed etc. Bottom line:send account activation email here

	@input lang: language of the user
			name: name of hte user
			token: account activation token
			email: email of the user
	'''

	

	email_message_template_file=''.join([settings.TEMPLATE_MESSAGES_DIR,lang,'/activationlink.html'])
	with open(email_message_template_file) as data:
		email_msg=data.read()

	activation_path=web_settings.WEB_ADDRESS_FRONTEND + 'start/activate/' + token + '/' + email;

	email_msg=email_msg.replace('{name}',name).replace('{link}',activation_path)

	sendMessage(_('EmailRegisteredSubject'),email_msg,email)